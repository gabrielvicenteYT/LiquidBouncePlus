/*
 * LiquidBounce+ Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/WYSI-Foundation/LiquidBouncePlus/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.combat.KillAura
import net.ccbluex.liquidbounce.features.module.modules.movement.*
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.ui.font.Fonts
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.Rotation
import net.ccbluex.liquidbounce.utils.RotationUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.render.Stencil
import net.ccbluex.liquidbounce.utils.render.RenderUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.*
import net.minecraft.client.gui.ScaledResolution
import net.minecraft.client.gui.inventory.GuiContainer
import net.minecraft.client.gui.inventory.GuiInventory
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.init.Items
import net.minecraft.network.handshake.client.C00Handshake
import net.minecraft.network.play.INetHandlerPlayClient
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.*
import io.netty.buffer.Unpooled
import net.minecraft.network.Packet
import net.minecraft.network.PacketBuffer
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing
import net.minecraft.world.WorldSettings.GameType

import java.awt.Color
import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import java.io.IOException
import java.util.LinkedList
import java.util.UUID

import kotlin.math.sqrt
import kotlin.math.round

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {

	val modeValue = ListValue("Mode", 
		arrayOf(
			"Basic", // cancel c0f and c00
			"SpartanCombat", // old spartan combat disabler
			"OldMatrix", // work with old matrix, around 5.2.x (with badly configured geysermc)
			"OldGhostly", // self-explanation
			"Kauri", // kauri
			"Riding", // spoof c0c packet with real player data
			"RidingV2", // shit
			"Spectate", // spoof c18 with player uid
			"SpectateV2", // spoof c18 with random uid
			"OldVerus", // Dort
			"LatestVerus", // FDP
			"MoonAC-Punishments", // simply detect fake demo packets and remove them, along with multiple guardians.
			"BlocksMC", // looks cool
			"PingSpoof", // ping spoof
			"Flag", // flag
			"Matrix", // re
			"Test"
		), "Basic")

	// PingSpoof (idfk what's this purpose but i will keep it here.)
	private val minpsf: IntegerValue = object : IntegerValue("PingSpoof-MinDelay", 0, 0, 10000, { modeValue.get().equals("pingspoof", true) }) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val v = maxpsf.get()
            if (v < newValue) set(v)
        }
    }
    private val maxpsf: IntegerValue = object : IntegerValue("PingSpoof-MaxDelay", 0, 0, 10000, { modeValue.get().equals("pingspoof", true) }) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val v = minpsf.get()
            if (v > newValue) set(v)
        }
    }
	private val psfStartSendMode = ListValue("PingSpoof-StartSendMode", arrayOf("All", "First"), "All", { modeValue.get().equals("pingspoof", true) })
	private val psfSendMode = ListValue("PingSpoof-SendMode", arrayOf("All", "First"), "All", { modeValue.get().equals("pingspoof", true) })
	private val psfWorldDelay = IntegerValue("PingSpoof-WorldDelay", 15000, 0, 30000, { modeValue.get().equals("pingspoof", true) })

	// flag
	private val flagMode = ListValue("Flag-Mode", arrayOf("Edit", "Packet"), "Edit", { modeValue.get().equals("flag", true) })
	private val flagTick = IntegerValue("Flag-TickDelay", 25, 1, 200, { modeValue.get().equals("flag", true) })
	private val flagSilent = BoolValue("Flag-SilentMode", true, { modeValue.get().equals("flag", true) })

	// matrix
	private val matrixNoCheck = BoolValue("Matrix-NoModuleCheck", false, { modeValue.get().equals("matrix", true) })
	private val matrixMoveFix = BoolValue("Matrix-MoveFix", true, { modeValue.get().equals("matrix", true) })
	private val matrixMoveOnly = BoolValue("Matrix-MoveOnly", false, { modeValue.get().equals("matrix", true) })
	private val matrixNoMovePacket = BoolValue("Matrix-NoMovePacket", true, { modeValue.get().equals("matrix", true) })
	private val matrixHotbarChange = BoolValue("Matrix-HotbarChange", true, { modeValue.get().equals("matrix", true) })

	// verus
	private val verusSlientFlagApplyValue = BoolValue("Verus-SlientFlagApply", false, { modeValue.get().equals("latestverus", true) })
    private val verusBufferSizeValue = IntegerValue("Verus-QueueActiveSize", 300, 0, 1000, { modeValue.get().equals("latestverus", true) })
	private val verusPurseDelayValue = IntegerValue("Verus-PurseDelay", 490, 0, 2000, { modeValue.get().equals("latestverus", true) })
	private val verusFlagDelayValue = IntegerValue("Verus-FlagDelay", 40, 40, 120, { modeValue.get().equals("latestverus", true) })
	private val verusConditionCheck = BoolValue("Verus-QueueCheck", true, { modeValue.get().equals("latestverus", true) })
	private val verusAntiFlyCheck = BoolValue("Verus-AntiFly", true, { modeValue.get().equals("latestverus", true) })

	// test
	val renderServer = BoolValue("Render-ServerSide", false, { modeValue.get().equals("test", true) })
	//val testPS = BoolValue("PingSpoofTest", false, { modeValue.get().equals("test", true) })

	// debug
	private val debugValue = BoolValue("Debug", false)

	// variables
	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()
	private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()
	private val anotherQueue = LinkedList<C00PacketKeepAlive>()

	private val packetBus = hashMapOf<Long, Packet<INetHandlerPlayServer>>()
	private val queueBus = LinkedList<Packet<INetHandlerPlayServer>>()
	
	private val msTimer = MSTimer()
	private val wdTimer = MSTimer()

	private var alrSendY = false
	private var alrSprint = false

	private var expectedSetback = false

	private var sendDelay = 0
	private var shouldActive = false

	private var transCount = 0
	private var counter = 0
	private var randDelay = 250

	var shouldModifyRotation = false
	var customYaw = 0F

	private var verusLastY = 0.0
	private var lastTick = 0

	private var lastId = 0

	val canModifyRotation: Boolean
		get() = (state && modeValue.get().equals("test", true) && shouldModifyRotation)

	val canRenderInto3D: Boolean
		get() = (state && modeValue.get().equals("test", true) && renderServer.get() && shouldModifyRotation)

	fun isMoving(): Boolean = (mc.thePlayer != null && (mc.thePlayer.movementInput.moveForward != 0F || mc.thePlayer.movementInput.moveStrafe != 0F || mc.thePlayer.movementInput.sneak || mc.thePlayer.movementInput.jump))

	fun debug(s: String) {
		if (debugValue.get())
			ClientUtils.displayChatMessage("§7[§3§lDisabler§7]§f $s")
	}

	fun shouldRun(): Boolean = mc.thePlayer != null && mc.thePlayer.inventory != null && !mc.thePlayer.inventory.hasItem(Items.compass) && mc.thePlayer.ticksExisted > 5
	fun isInventory(action: Short): Boolean = action > 0 && action < 100

	override val tag: String
        get() = modeValue.get()

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()
		packetQueue.clear()
		anotherQueue.clear()
		packetBus.clear()
		queueBus.clear()

		msTimer.reset()
		wdTimer.reset()
		expectedSetback = false
		shouldActive = false
		alrSendY = false
		alrSprint = false
		transCount = 0
		lastTick = 0

		shouldModifyRotation = false
		customYaw = 0F
	}

	override fun onDisable() {
		keepAlives.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}
		transactions.forEach {
			PacketUtils.sendPacketNoEvent(it)
		}

		keepAlives.clear()
		transactions.clear()
		packetQueue.clear()
		anotherQueue.clear()
		packetBus.clear()

		if (modeValue.get().equals("pingspoof", true)) {
			// make sure not to cause weird flag
			for (p in queueBus)
				PacketUtils.sendPacketNoEvent(p)
		}
		queueBus.clear()

		msTimer.reset()

		mc.thePlayer.motionY = 0.0
		MovementUtils.strafe(0F)
		mc.timer.timerSpeed = 1F
	}

	@EventTarget
	fun onRender2D(event: Render2DEvent) {
		if (!shouldActive && modeValue.get().equals("pingspoof", true))
		{
			val sc = ScaledResolution(mc)
			val strength = (msTimer.hasTimeLeft(psfWorldDelay.get().toLong()).toFloat() / psfWorldDelay.get().toFloat()).coerceIn(0F, 1F)
			Stencil.write(true)
			RenderUtils.drawRoundedRect(sc.scaledWidth / 2F - 50F, 35F, sc.scaledWidth / 2F + 50F, 55F, 10F, Color(0, 0, 0, 140).rgb)
			Stencil.erase(true)
			RenderUtils.drawRect(sc.scaledWidth / 2F - 50F, 35F, sc.scaledWidth / 2F - 50F + 100F * strength, 55F, Color(0, 111, 255, 70).rgb)
			Stencil.dispose()
			Fonts.font40.drawCenteredString("${(msTimer.hasTimeLeft(psfWorldDelay.get().toLong()).toFloat() / 1000F).toInt()}s left...", sc.scaledWidth / 2F, 41F, -1)
		}
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		val packet = event.packet
	
		when (modeValue.get().toLowerCase()) {
			"oldmatrix" -> if (packet is C03PacketPlayer && mc.thePlayer.ticksExisted % 15 == 0) {
				try {
					val b = ByteArrayOutputStream()
	                val _out = DataOutputStream(b)
	                _out.writeUTF(mc.thePlayer.gameProfile.getName())
	                val buf = PacketBuffer(Unpooled.buffer())
	                buf.writeBytes(b.toByteArray())
	                mc.netHandler.addToSendQueue(C17PacketCustomPayload("matrix:geyser", buf))

					debug("Sent Matrix Geyser spoof packet.")
				} catch (e: IOException) {
					debug("Error occurred.")
				}
			}
			"kauri" -> if (packet is C0FPacketConfirmTransaction) event.cancelEvent()
			"riding" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
			"ridingv2" -> {
				if (packet is C03PacketPlayer || packet is C0BPacketEntityAction) event.cancelEvent()
			}
			"basic" -> if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			"oldghostly" -> {
				if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C0CPacketInput())
				if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) event.cancelEvent()
			}
			"spartancombat" -> {
        		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives[keepAlives.size - 1])) {
					debug("c00 added")
            		keepAlives.add(packet)
            		event.cancelEvent()
        		}
        		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions[transactions.size - 1])) {
					debug("c0f added")
            		transactions.add(packet)
            		event.cancelEvent()
        		}
			}
			"spectate" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
			"spectatev2" -> if (packet is C03PacketPlayer) mc.netHandler.addToSendQueue(C18PacketSpectate(UUID.randomUUID()))
			"latestverus" -> { // liulihaocai
                if (!shouldRun()) {
                    msTimer.reset()
                    packetQueue.clear()
					return
                }

                if (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid)) {
                    packetQueue.add(packet)
                    event.cancelEvent()
                    if(packetQueue.size > verusBufferSizeValue.get()) {
                        if(!shouldActive) {
                            shouldActive = true
                            LiquidBounce.hud.addNotification(Notification("Successfully put Verus into sleep.", Notification.Type.SUCCESS))
                        }
                        PacketUtils.sendPacketNoEvent(packetQueue.poll())
                    }
                    debug("c0f, ${packetQueue.size}")
                }

				if (packet is C0BPacketEntityAction) {
					event.cancelEvent()
					debug("ignored packet action")
				}

				if (packet is C03PacketPlayer) {
                    if(mc.thePlayer.ticksExisted % verusFlagDelayValue.get() == 0) {
                        debug("modified c03")
                        packet.y -= 11.015625 // just phase into ground instead (minimum to flag)
                        packet.onGround = false
                        packet.isMoving = false
                    }
                }

				if (packet is S08PacketPlayerPosLook && verusSlientFlagApplyValue.get()) {
                    val x = packet.x - mc.thePlayer.posX
                    val y = packet.y - mc.thePlayer.posY
                    val z = packet.z - mc.thePlayer.posZ
                    val diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        // verus, why
                        debug("flag silent accept")
                        PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(packet.x, packet.y, packet.z, packet.getYaw(), packet.getPitch(), true))
                    }
                }
            }
			"oldverus" -> {
				if (packet is C03PacketPlayer) {
					val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
					mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

					if (mc.thePlayer.ticksExisted % 45 == 0) {
						debug("flag")
						PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
            			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false))
            			PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
					}
				}

				if (packet is S08PacketPlayerPosLook) {
					if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

					var x = packet.getX() - mc.thePlayer.posX
      				var y = packet.getY() - mc.thePlayer.posY
      				var z = packet.getZ() - mc.thePlayer.posZ
      				var diff = sqrt(x * x + y * y + z * z)
      				if (diff <= 8) {
        				event.cancelEvent()
        				PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true))

						debug("silent s08 accept")
      				}
				}

				if (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid)) {
					repeat (4) {
						packetQueue.add(packet)
					}
					event.cancelEvent()
					debug("c0f dupe: 4x")
				}
			}
			"moonac-punishments" -> {
				if (packet is S2BPacketChangeGameState && ((packet.getGameState() == 5 && !mc.isDemo()) || packet.getGameState() == 10)) {
				// 5 = demo screen, 10 = guardian sound + animations
					event.cancelEvent()
					debug("found attempt to trigger ${if (packet.getGameState() == 5) "demo screen" else "guardian effects"}.")
				}

				if (packet is S02PacketChat && packet.getChatComponent() != null &&
				packet.getChatComponent().getUnformattedText().startsWith("GET TROLL", true))
					event.cancelEvent()
			}
			"flag" -> {
				if (packet is C03PacketPlayer && flagMode.get().equals("edit", true) && mc.thePlayer.ticksExisted > 0 && mc.thePlayer.ticksExisted % flagTick.get() == 0)
				{
					packet.isMoving = false
					packet.onGround = false
					packet.y = -0.08

					debug("flagged")
				}
				if (packet is S08PacketPlayerPosLook && flagSilent.get()) {
					if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

					var x = packet.getX() - mc.thePlayer.posX
      				var y = packet.getY() - mc.thePlayer.posY
      				var z = packet.getZ() - mc.thePlayer.posZ
      				var diff = sqrt(x * x + y * y + z * z)
      				if (diff <= 8) {
        				event.cancelEvent()
        				PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true))

						debug("silent s08 accept")
      				}
				}
			}
			"pingspoof" -> {
				if (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid)) {
					queueBus.add(packet)
					event.cancelEvent()

					debug("c0f added, action id ${packet.uid}, target id ${packet.windowId}")
				}
				if (packet is C00PacketKeepAlive) {
					queueBus.add(packet)
					event.cancelEvent()

					debug("c00 added, key ${packet.key}")
				}
			}
			"matrix" -> {
				if (matrixNoCheck.get() || LiquidBounce.moduleManager.getModule(Speed::class.java)!!.state || LiquidBounce.moduleManager.getModule(Fly::class.java)!!.state) {
					if (packet is C03PacketPlayer) {
						if (matrixNoMovePacket.get() && !packet.isMoving()) {
							event.cancelEvent()
							debug("no move, cancelled")
							return
						}
						if (matrixMoveFix.get()) {
							// almost completely disable strafe check, nofall
							packet.onGround = true
							if (!packet.rotating) { // fix fly sometimes doesn't land properly since 1.8.x servers all refer to C04, C05, C06 as C03s.
								packet.rotating = true
								packet.yaw = mc.thePlayer.rotationYaw
								packet.pitch = mc.thePlayer.rotationPitch
							}
						}
					}
				}
			}/*
			"test" -> {
				if (!testPS.get() || mc.isSingleplayer()) return
				if (mc.thePlayer.ticksExisted < 5) counter = 0

				if (packet is C0FPacketConfirmTransaction) {
					event.cancelEvent()
					counter++
					lastId = packet.uid.toInt()
					packetQueue.add(packet)
					debug("c0f, uid ${packet.uid}, wid ${packet.windowId}")
				}
			}*/
		}
	}

	fun flush(check: Boolean) {
		if ((if (check) psfSendMode.get() else psfStartSendMode.get()).equals("all", true)) 
			while (queueBus.size > 0) {
				PacketUtils.sendPacketNoEvent(queueBus.poll())
			}
		else
			PacketUtils.sendPacketNoEvent(queueBus.poll())
	}

	@EventTarget
	fun onWorld(event: WorldEvent) {
		transactions.clear()
		keepAlives.clear()
		packetQueue.clear()
		anotherQueue.clear()
		packetBus.clear()
		queueBus.clear()

		msTimer.reset()
		wdTimer.reset()
		expectedSetback = false
		shouldActive = false
		alrSendY = false
		alrSprint = false
		transCount = 0
		counter = 0
		lastTick = 0
	}

	@EventTarget
	fun onMotion(event: MotionEvent) {
		shouldModifyRotation = false
		customYaw = mc.thePlayer.rotationYaw
		val killAura = LiquidBounce.moduleManager.getModule(KillAura::class.java)!! as KillAura
		val speed = LiquidBounce.moduleManager.getModule(Speed::class.java)!! as Speed
		val targetStrafe = LiquidBounce.moduleManager.getModule(TargetStrafe::class.java)!! as TargetStrafe
		if (modeValue.get().equals("test", true) && speed.state) { 
			if (targetStrafe.canStrafe) {
				customYaw = RotationUtils.getRotationsEntity(killAura.target!!).yaw + (if (targetStrafe.direction > 0) -90F else 90F)
				shouldModifyRotation = true

				debug("target strafe active, $customYaw")
				// no need to check for aura
			} else if (MovementUtils.isMoving()) {
				val expectRot = MovementUtils.getRawDirection()
				if (expectRot != customYaw) {
					customYaw = expectRot

					if (killAura.target == null) // check for aura
						RotationUtils.setTargetRotation(Rotation(customYaw, mc.thePlayer.rotationPitch))
					debug("strafe active, $customYaw")
				}
				shouldModifyRotation = true
			}
		}
		if (event.eventState == EventState.POST && (!matrixMoveOnly.get() || isMoving())) // check post event
			if (modeValue.get().equals("matrix", true)) {
				if (matrixNoCheck.get() || LiquidBounce.moduleManager.getModule(Fly::class.java)!!.state || LiquidBounce.moduleManager.getModule(Speed::class.java)!!.state) {
					var changed = false
					if (matrixHotbarChange.get()) for (i in 0..8) {
            			// find a empty inventory slot
            			if(mc.thePlayer.inventory.mainInventory[i] == null && i != mc.thePlayer.inventory.currentItem) {
                			PacketUtils.sendPacketNoEvent(C09PacketHeldItemChange(i))
							changed = true
							debug("found empty slot $i, switching")
                			break
            			}
					}
        			
					PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, RotationUtils.serverRotation.yaw, RotationUtils.serverRotation.pitch, mc.thePlayer.onGround))
					mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(BlockPos(-1, -1, -1), -1, null, 0f, 0f, 0f))
					debug("sent placement")
					
					if (changed) {
						PacketUtils.sendPacketNoEvent(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
						debug("switched back")
					}
				}
			}
	}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		when (modeValue.get().toLowerCase()) {
			"spartancombat" -> {
				if (msTimer.hasTimePassed(3000L) && keepAlives.size > 0 && transactions.size > 0) {
					PacketUtils.sendPacketNoEvent(keepAlives[keepAlives.size - 1])
					PacketUtils.sendPacketNoEvent(transactions[transactions.size - 1])

					debug("c00 no.${keepAlives.size - 1} sent.")
					debug("c0f no.${transactions.size - 1} sent.")
					keepAlives.clear()
					transactions.clear()
					msTimer.reset()
				}
			}
			"oldverus" -> {
				if (mc.thePlayer.ticksExisted % 180 == 0) {
      				while (packetQueue.size > 22) {
        				PacketUtils.sendPacketNoEvent(packetQueue.poll())
      				}
					debug("pushed queue until size < 22.")
    			}
			}
			"ridingv2" -> {
				if (lastTick != mc.thePlayer.ticksExisted) {
					PacketUtils.sendPacketNoEvent(C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround))
					mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing.coerceAtMost(0.98F), mc.thePlayer.moveForward.coerceAtMost(0.98F), mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
					PacketUtils.sendPacketNoEvent(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.OPEN_INVENTORY))
					lastTick = mc.thePlayer.ticksExisted
					debug("riding")
				}
			}
			"latestverus" -> {
				if (verusAntiFlyCheck.get() && !shouldActive) {
					val flyMod = LiquidBounce.moduleManager[Fly::class.java]!!
					if (flyMod.state) {
						flyMod.state = false
						LiquidBounce.hud.addNotification(Notification("You can't fly before successful activation.", Notification.Type.WARNING))
						debug("no fly allowed")
					}
				}
                if(msTimer.hasTimePassed(verusPurseDelayValue.get().toLong()) && (!verusConditionCheck.get() || shouldActive)) {
                    msTimer.reset()
                    if(!packetQueue.isEmpty()) {
                        PacketUtils.sendPacketNoEvent(packetQueue.poll())
                        debug("release queue")
                    } else {
                        debug("nothing to release")
                    }
                }
            }
			"pingspoof" -> {
				if (msTimer.hasTimePassed(psfWorldDelay.get().toLong()) && !shouldActive) {
					shouldActive = true
					sendDelay = RandomUtils.nextInt(minpsf.get(), maxpsf.get())
					if (queueBus.size > 0) flush(false)
					msTimer.reset()
					debug("activated. expected next delay: ${sendDelay}ms")
				}

				if (shouldActive) {
					if (msTimer.hasTimePassed(sendDelay.toLong()) && !queueBus.isEmpty()) {
						flush(true)
						sendDelay = RandomUtils.nextInt(minpsf.get(), maxpsf.get())
						msTimer.reset()
						debug("expected next delay: ${sendDelay}ms")
					}
				}
			}
			"flag" -> {
				if (flagMode.get().equals("packet", true) && mc.thePlayer.ticksExisted > 0 && mc.thePlayer.ticksExisted % flagTick.get() == 0) {
					PacketUtils.sendPacketNoEvent(C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, -0.08, mc.thePlayer.posZ, mc.thePlayer.onGround))
					debug("flagged")
				}
			}/*
			"test" -> {
				if (!testPS.get() || mc.isSingleplayer()) return
				if (mc.thePlayer.ticksExisted < 5) {
					packetQueue.clear()
					wdTimer.reset()
					msTimer.reset()
					counter = 0
					lastId = 0
				}

				if (msTimer.hasTimePassed(200L)) {
					PacketUtils.sendPacketNoEvent(C0FPacketConfirmTransaction(RandomUtils.nextInt(100, 999), (lastId - 1).toShort(), counter % 6 == 0))
					msTimer.reset()
					debug("custom c0f")
				}

				if (wdTimer.hasTimePassed(200L)) {
					while (packetQueue.size > 0) {
						PacketUtils.sendPacketNoEvent(packetQueue.poll())
					}
					wdTimer.reset()
					debug("cooling heap")
				}
			}*/
		}
	}
}
